{
  "metadata": {
    "name": "rag_qa_dataset",
    "created_at": "2024-01-15T10:00:00",
    "version": "1.0.0",
    "description": "RAG系统评估黄金测试集",
    "language": "zh-CN"
  },
  "test_cases": [
    {
      "test_case_id": "rag_001",
      "question": "什么是RAG技术？",
      "ground_truth": "RAG（Retrieval-Augmented Generation）是检索增强生成技术，它结合了信息检索和文本生成两种方法。RAG首先从知识库中检索相关信息，然后将这些信息作为上下文提供给语言模型，使其能够生成更准确、更有依据的回答。",
      "contexts": [
        "RAG (Retrieval-Augmented Generation) 是一种结合了信息检索和文本生成的人工智能技术。",
        "检索增强生成通过先从大规模知识库中检索相关信息，再将这些信息作为上下文提供给语言模型。",
        "这种方法有效解决了大语言模型的'幻觉'问题，提高了生成内容的准确性和可靠性。"
      ],
      "metadata": {
        "category": "definition",
        "difficulty": "easy",
        "domain": "技术概念"
      }
    },
    {
      "test_case_id": "rag_002",
      "question": "RAG技术有哪些主要优势？",
      "ground_truth": "RAG技术的主要优势包括：1) 知识可更新性：无需重新训练模型即可更新知识库；2) 可解释性：每个答案都可追溯到具体的源文档；3) 成本效益：相比微调大模型，RAG的实施成本更低；4) 领域适应性：可以快速适应特定领域的知识需求。",
      "contexts": [
        "RAG的核心优势包括：知识可更新性：无需重新训练模型即可更新知识库",
        "可解释性：每个答案都可追溯到具体的源文档",
        "成本效益：相比微调大模型，RAG的实施成本更低",
        "领域适应性：可以快速适应特定领域的知识需求"
      ],
      "metadata": {
        "category": "advantages",
        "difficulty": "medium",
        "domain": "技术特性"
      }
    },
    {
      "test_case_id": "rag_003",
      "question": "如何实施RAG系统？",
      "ground_truth": "实施RAG系统的关键步骤包括：第一步，文档准备和预处理，包括格式转换、清洗和标准化；第二步，文档分块策略设计，需要考虑语义完整性和检索效率的平衡；第三步，向量化和索引构建，选择合适的嵌入模型和向量数据库；第四步，检索策略优化，包括混合检索和重排序；第五步，生成质量控制，包括提示工程和后处理。",
      "contexts": [
        "实施RAG系统的关键步骤：第一步：文档准备和预处理，包括格式转换、清洗和标准化",
        "第二步：文档分块策略设计，需要考虑语义完整性和检索效率的平衡",
        "第三步：向量化和索引构建，选择合适的嵌入模型和向量数据库",
        "第四步：检索策略优化，包括混合检索和重排序",
        "第五步：生成质量控制，包括提示工程和后处理"
      ],
      "metadata": {
        "category": "implementation",
        "difficulty": "hard",
        "domain": "实施指南"
      }
    },
    {
      "test_case_id": "rag_004",
      "question": "RAG系统中的向量数据库有什么作用？",
      "ground_truth": "向量数据库在RAG系统中扮演核心角色，主要用于存储和检索文档的向量表示。它支持高效的相似度搜索，能够快速找到与查询最相关的文档片段。常用的向量数据库包括ChromaDB、Pinecone、Weaviate等，它们提供了向量索引、元数据过滤、批量操作等功能。",
      "contexts": [
        "向量数据库用于存储文档的向量表示，支持高效的相似度搜索",
        "向量数据库能够快速找到与查询向量最相似的文档片段",
        "常用的向量数据库包括ChromaDB、Pinecone、Weaviate、Qdrant等",
        "这些数据库提供向量索引、元数据过滤、批量操作等功能"
      ],
      "metadata": {
        "category": "component",
        "difficulty": "medium",
        "domain": "系统组件"
      }
    },
    {
      "test_case_id": "rag_005",
      "question": "什么是文档分块（Chunking）？为什么重要？",
      "ground_truth": "文档分块是将长文档分割成较小的、语义完整的片段的过程。这很重要因为：1) 大多数嵌入模型有输入长度限制；2) 较小的片段能提供更精确的检索结果；3) 适当的分块能保持上下文的完整性；4) 影响检索的准确性和生成的质量。",
      "contexts": [
        "文档分块（Chunking）是将长文档分割成较小片段的过程",
        "分块重要的原因：嵌入模型通常有输入长度限制（如512或1024个token）",
        "较小的片段能够提供更精确的检索结果，避免无关信息干扰",
        "良好的分块策略需要在片段大小和语义完整性之间找到平衡"
      ],
      "metadata": {
        "category": "concept",
        "difficulty": "medium",
        "domain": "技术概念"
      }
    },
    {
      "test_case_id": "rag_006",
      "question": "如何评估RAG系统的性能？",
      "ground_truth": "RAG系统的评估通常包括以下指标：1) Faithfulness（忠实度）：答案是否基于提供的上下文；2) Answer Relevancy（答案相关性）：答案是否切题；3) Context Precision（上下文精确度）：检索的上下文是否相关；4) Context Recall（上下文召回率）：是否检索到所有相关信息。可以使用RAGAS等框架进行自动化评估。",
      "contexts": [
        "RAG系统评估的主要指标包括：Faithfulness（忠实度）- 衡量答案是否忠于检索到的文档",
        "Answer Relevancy（答案相关性）- 评估答案是否切合问题",
        "Context Precision（上下文精确度）- 检索到的上下文中相关内容的比例",
        "Context Recall（上下文召回率）- 相关信息被检索到的完整程度",
        "可以使用RAGAS、TruLens等评估框架进行自动化评估"
      ],
      "metadata": {
        "category": "evaluation",
        "difficulty": "hard",
        "domain": "评估方法"
      }
    },
    {
      "test_case_id": "rag_007",
      "question": "混合检索（Hybrid Search）是什么？",
      "ground_truth": "混合检索是结合多种检索方法的技术，通常包括语义检索（基于向量相似度）和关键词检索（如BM25）。这种方法综合了语义理解和精确匹配的优势，能够提供更全面的检索结果。混合检索通过加权融合或重排序等策略组合不同检索方法的结果。",
      "contexts": [
        "混合检索（Hybrid Search）结合了多种检索方法，最常见的是语义检索和关键词检索的结合",
        "语义检索基于向量相似度，能够理解语义相关性",
        "关键词检索（如BM25）擅长精确匹配，对特定术语敏感",
        "混合检索通过加权融合、倒数排名融合（RRF）等方法组合不同检索结果"
      ],
      "metadata": {
        "category": "technique",
        "difficulty": "medium",
        "domain": "检索技术"
      }
    },
    {
      "test_case_id": "rag_008",
      "question": "LlamaIndex和LangChain在RAG中的区别是什么？",
      "ground_truth": "LlamaIndex专注于数据索引和检索，提供了丰富的数据连接器和索引结构，更适合构建复杂的检索系统。LangChain则是一个更通用的LLM应用框架，提供了链式调用、代理、工具等功能，RAG只是其中一个应用场景。LlamaIndex在RAG场景下通常性能更优，而LangChain的生态系统更丰富。",
      "contexts": [
        "LlamaIndex专门针对索引和检索场景设计，提供了多种索引结构（列表索引、向量索引、树形索引等）",
        "LangChain是一个通用的LLM应用开发框架，提供链（Chain）、代理（Agent）、工具（Tool）等抽象",
        "LlamaIndex在数据加载、索引构建、查询优化方面更专业",
        "LangChain的优势在于丰富的集成和灵活的编排能力，适合构建复杂的LLM应用"
      ],
      "metadata": {
        "category": "comparison",
        "difficulty": "hard",
        "domain": "工具对比"
      }
    },
    {
      "test_case_id": "rag_009",
      "question": "如何处理RAG中的多语言问题？",
      "ground_truth": "处理RAG中的多语言问题需要：1) 使用支持多语言的嵌入模型，如multilingual-e5；2) 在文档处理时保留语言标识元数据；3) 实施语言特定的分块策略；4) 在检索时考虑跨语言匹配；5) 使用支持多语言的生成模型。关键是确保嵌入空间的语言一致性。",
      "contexts": [
        "多语言RAG需要使用支持多语言的嵌入模型，如multilingual-e5、mE5等",
        "文档处理时需要识别和标记语言类型，作为元数据保存",
        "不同语言可能需要不同的分块策略，如中文可以按句号分块，英文按段落",
        "检索时可以实现跨语言检索，但同语言匹配通常效果更好",
        "生成阶段需要使用支持目标语言的LLM模型"
      ],
      "metadata": {
        "category": "advanced",
        "difficulty": "hard",
        "domain": "高级主题"
      }
    },
    {
      "test_case_id": "rag_010",
      "question": "RAG系统如何处理实时更新的知识？",
      "ground_truth": "RAG系统处理实时更新的知识包括：1) 增量索引：支持动态添加新文档而不重建整个索引；2) 版本控制：为文档维护版本历史；3) 定期更新：设置合理的更新频率；4) 缓存失效：确保查询结果反映最新知识；5) 监控机制：跟踪知识库的变化和更新效果。",
      "contexts": [
        "RAG系统通过增量索引支持知识的实时更新，无需重建整个向量数据库",
        "实施文档版本控制，记录每次更新的时间戳和变更内容",
        "设置合理的更新策略，如定时批量更新或基于事件的实时更新",
        "实现缓存失效机制，确保用户获取到最新的信息",
        "建立监控系统，跟踪知识更新的频率和效果"
      ],
      "metadata": {
        "category": "operation",
        "difficulty": "hard",
        "domain": "系统运维"
      }
    }
  ]
}